/***********************************************************************
 * SDL_cubeaudio.c
 *
 * cubeSDL - SDL library 1.2 for GameCube
 * by infact <infact [at] quantentunnel [dot] de>
 * Source is based on code by Tantric, Softdev and others
 **********************************************************************/
/*
    SDL - Simple DirectMedia Layer
    Copyright (C) 1997-2012 Sam Lantinga

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

    Sam Lantinga
    slouken@libsdl.org
*/
#include "SDL_config.h"

#include <gccore.h>
#include <ogcsys.h>
#include <gctypes.h>
#include <ogc/audio.h>
#include <ogc/cache.h>

#include "SDL_rwops.h"
#include "SDL_timer.h"
#include "SDL_audio.h"
#include "../SDL_audiomem.h"
#include "../SDL_audio_c.h"
#include "SDL_cubeaudio.h"

/* Double buffered cube audio */
#define SAMPLES_PER_DMA_BUFFER (512)
static int whichab = 0;
static u32 dma_buffers[2][SAMPLES_PER_DMA_BUFFER * 8] ATTRIBUTE_ALIGN (32);
static int dma_buffers_size[2] = { SAMPLES_PER_DMA_BUFFER * 4, SAMPLES_PER_DMA_BUFFER * 4 };

/* Threading support */
#define AUDIOSTACK 16384*2
static lwpq_t audioqueue;
static lwp_t athread = LWP_THREAD_NULL;
static u8 astack[AUDIOSTACK];
static bool stopaudio = false;
static int currentfreq;

/* The tag name used by CUBE audio */
#define CUBEAUD_DRIVER_NAME "cube"

/* Audio driver functions */
static int CUBEAUD_OpenAudio(_THIS, SDL_AudioSpec *spec);
static void CUBEAUD_WaitAudio(_THIS);
static void CUBEAUD_PlayAudio(_THIS);
static Uint8 *CUBEAUD_GetAudioBuf(_THIS);
static void CUBEAUD_CloseAudio(_THIS);

/* Audio threading helper functions */
void CUBE_AudioStart();
void CUBE_AudioStop();
static void * AudioThread (void *arg);
static void DMACallback();

/* Audio driver bootstrap functions */
static int CUBEAUD_Available(void)
{
	// Always available
	return(1);
}

static void CUBEAUD_DeleteDevice(SDL_AudioDevice *device)
{
	// Forget the DMA callback
	AUDIO_RegisterDMACallback(0);

	// Stop any DMA going on, silence the output
	AUDIO_StopDMA();

	// Terminate conversion thread
	LWP_ThreadSignal(audioqueue);

	SDL_free(device);
}

static SDL_AudioDevice *CUBEAUD_CreateDevice(int devindex)
{
	SDL_AudioDevice *this;

	/* Initialize all variables that we clean on shutdown */
	this = (SDL_AudioDevice *)SDL_malloc(sizeof(SDL_AudioDevice));

	if ( this ) {
		SDL_memset(this, 0, (sizeof *this));
	}
	if ( this == NULL ) {
		SDL_OutOfMemory();
		SDL_free(this);
		return(0);
	}

	/* Set the function pointers */
	this->OpenAudio = CUBEAUD_OpenAudio;
	this->WaitAudio = CUBEAUD_WaitAudio;
	this->PlayAudio = CUBEAUD_PlayAudio;
	this->GetAudioBuf = CUBEAUD_GetAudioBuf;
	this->CloseAudio = CUBEAUD_CloseAudio;
	this->free = CUBEAUD_DeleteDevice;

	// Initialise cube audio system
	AUDIO_Init(0);

	return this;
}

AudioBootStrap CUBEAUD_bootstrap = {
	CUBEAUD_DRIVER_NAME, "SDL cube audio driver",
	CUBEAUD_Available, CUBEAUD_CreateDevice
};

/* This function waits until it is possible to write a full sound buffer */
static void CUBEAUD_WaitAudio(_THIS)
{
	/* no need to wait */
}

static void CUBEAUD_PlayAudio(_THIS)
{
	/* audio get's played by DMACallback() */
}

static Uint8 *CUBEAUD_GetAudioBuf(_THIS)
{
	/* There is no buffer */
	return NULL;
}

static void CUBEAUD_CloseAudio(_THIS)
{
	// Stop any DMA going on, silence the output
	AUDIO_StopDMA();

	// Terminate conversion thread
	LWP_ThreadSignal(audioqueue);
}

static int CUBEAUD_OpenAudio(_THIS, SDL_AudioSpec *spec)
{
	if (spec->freq != 32000 && spec->freq != 48000)
		spec->freq = 32000;

	// Set up actual spec.
	spec->format	= AUDIO_S16MSB;
	spec->channels	= 2;
	spec->samples	= SAMPLES_PER_DMA_BUFFER;
	spec->padding	= 0;
	SDL_CalculateAudioSpec(spec);

	/* Clear mixing buffers */
	memset(dma_buffers[0], 0, sizeof(dma_buffers[0]));
	memset(dma_buffers[1], 0, sizeof(dma_buffers[1]));

	currentfreq = spec->freq;

	// Initialise the audio conversion thread
	CUBE_AudioStart();

	/* We're ready to rock and roll. :-) */
	return 0;
}

/* Audio threading helper functions */

void CUBE_AudioStart()
{
	if (currentfreq == 32000)
		AUDIO_SetDSPSampleRate(AI_SAMPLERATE_32KHZ);
	else
		AUDIO_SetDSPSampleRate(AI_SAMPLERATE_48KHZ);

	// Start conversion thread
	stopaudio = false;
	LWP_InitQueue (&audioqueue);
	LWP_CreateThread (&athread, AudioThread, NULL, astack, AUDIOSTACK, 67);

	// Start the first chunk of audio playing
	AUDIO_RegisterDMACallback(DMACallback);
	DMACallback();
	AUDIO_StartDMA();
}

void CUBE_AudioStop()
{
	// Stop playing
	AUDIO_StopDMA ();
	AUDIO_RegisterDMACallback(0);
	stopaudio = true;

	// End conversion thread
	LWP_ThreadSignal(audioqueue);
	LWP_JoinThread(athread, NULL);
	LWP_CloseQueue (audioqueue);
	athread = LWP_THREAD_NULL;
}

static void * AudioThread (void *arg)
{
	while (1)
	{
		if(stopaudio)
			break;

		memset(dma_buffers[whichab], 0, SAMPLES_PER_DMA_BUFFER*4);

		// Is the device ready?
		if (!current_audio || current_audio->paused)
		{
			// Update buffer memory and size
			DCFlushRange(dma_buffers[whichab], SAMPLES_PER_DMA_BUFFER * 4);
			dma_buffers_size[whichab] = SAMPLES_PER_DMA_BUFFER * 4;
		}
		// Is conversion required?
		else if (current_audio->convert.needed)
		{
			SDL_mutexP(current_audio->mixer_lock);
			// Get the client to produce audio
			current_audio->spec.callback(
					current_audio->spec.userdata,
					current_audio->convert.buf,
					current_audio->convert.len);
			SDL_mutexV(current_audio->mixer_lock);

			// Convert the audio
			SDL_ConvertAudio(&current_audio->convert);

			// Copy from SDL buffer to DMA buffer
			memcpy(dma_buffers[whichab], current_audio->convert.buf, current_audio->convert.len_cvt);
			DCFlushRange(dma_buffers[whichab], current_audio->convert.len_cvt);
			dma_buffers_size[whichab] = current_audio->convert.len_cvt;
		}
		else
		{
			// Copy audio to dma buffer
			SDL_mutexP(current_audio->mixer_lock);
			current_audio->spec.callback(
					current_audio->spec.userdata,
					(Uint8 *)dma_buffers[whichab],
					SAMPLES_PER_DMA_BUFFER * 4);
			DCFlushRange(dma_buffers[whichab], SAMPLES_PER_DMA_BUFFER * 4);
			dma_buffers_size[whichab] = SAMPLES_PER_DMA_BUFFER * 4;
			SDL_mutexV(current_audio->mixer_lock);
		}

		// Wait until DMACallback() has finished
		LWP_ThreadSleep (audioqueue);
	}
	return NULL;
}

/* Playback audio and signal audio thread that more samples are required */
static void DMACallback()
{
	// Switch buffers
	whichab ^= 1;
	AUDIO_InitDMA ((Uint32)dma_buffers[whichab], dma_buffers_size[whichab]);
	LWP_ThreadSignal (audioqueue);
}
